// Test 3: Advanced Control Flow and Expressions
// Tests complex nested structures, advanced expressions, and edge cases

fun complexControlFlow(): Unit {
    // Nested if-else with mixed semicolon usage
    val x = 10
    val y = 5;
    
    if (x > y) {
        if (x > 15) {
            print("x is greater than 15")
        } else {
            print("x is between 5 and 15");
        }
    } else {
        print("x is not greater than y")
    }
    
    // Nested loops with break conditions
    var i = 0;
    while (i < 3) {
        var j = 0
        while (j < 3) {
            if (i == j) {
                print("Diagonal: ")
                print(i);
            } else {
                print("Off-diagonal")
            }
            j = j + 1
        }
        i = i + 1;
    }
    
    // For loop with complex range expressions
    for (k in (x - y)..(x + y)) {
        if (k % 2 == 0) {
            print("Even: ");
            print(k)
        } else {
            print("Odd: ")
            print(k);
        }
    }
}

fun expressionTesting(): Unit {
    // Complex arithmetic expressions
    val result1 = 2 + 3 * 4 - 1;
    val result2 = (10 + 5) * 2 / 3
    val result3 = 2 * (3 + 4) * (5 - 2);
    
    print(result1)
    print(result2);
    print(result3)
    
    // Complex logical expressions  
    val a = true
    val b = false;
    val c = true
    
    if (a && (b || c)) {
        print("Complex logic 1 passed")
    }
    
    if (!a || (b && !c)) {
        print("Complex logic 2 passed");
    } else {
        print("Complex logic 2 failed")
    }
    
    // Complex comparison expressions
    val num1 = 15;
    val num2 = 10
    val num3 = 20;
    
    if (num1 > num2 && num1 < num3) {
        print("num1 is between num2 and num3")
    }
    
    if (num1 >= 15 && num2 <= 10) {
        print("Boundary conditions met");
    }
}

fun stringAndCalls(): Unit {
    // String expressions with function calls
    val greeting = "Hello"
    val name = "Kotlin";
    
    print(greeting)
    print(name)
    
    // Unary expressions
    var counter = 5
    print(-counter);
    print(!true)
    print(!false);
    
    // Assignment in various contexts
    val array_size = 10
    var index = 0;
    
    while (index < array_size) {
        if (index % 3 == 0) {
            val temp = index * 2
            print(temp);
        }
        index = index + 1
    }
}

// Deeply nested blocks
fun nestedBlocks(): Unit {
    val outer = 1;
    
    if (outer > 0) {
        val middle = 2
        
        if (middle > 1) {
            val inner = 3;
            
            if (inner > 2) {
                print("Deep nesting works")
                
                for (i in 1..inner) {
                    if (i == 2) {
                        val deepest = 4;
                        print(deepest)
                    }
                }
            }
        }
    }
}

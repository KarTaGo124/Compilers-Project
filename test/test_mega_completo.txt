// MEGA TEST COMPLETO - USA TODOS LOS TOKENS Y TODA LA GRAMÁTICA
// Comentario de línea simple

/* 
 * Comentario de bloque múltiple
 * que abarca varias líneas
 */

// ==================== DECLARACIONES GLOBALES ====================
// Variables globales de todos los tipos
var globalInt: Int = 42
val constantFloat: Float = 3.14159f
var globalString: String = "Global String Variable"
var globalBoolean: Boolean = true
var globalDecimalFloat: Float = 123.456f
var globalDecimalSimple: Float = 99.0f
var globalIntFromCalc: Int = 10 + 5 * 2 - 3 / 1 % 4

// ==================== FUNCIONES GLOBALES ====================
// Función sin parámetros que retorna Int
fun simpleFunction(): Int {
    return 100
}

// Función con múltiples parámetros y tipo de retorno Float
fun complexCalculation(a: Int, b: Float, c: String, d: Boolean): Float {
    var result: Float = 0.0f
    if (d) {
        result = a + b * 2.5f
    } else {
        result = a - b / 3.0f
    }
    return result
}

// Función que retorna String
fun stringProcessor(input: String, suffix: String): String {
    return input + " processed with " + suffix
}

// Función que retorna Boolean
fun logicalProcessor(x: Int, y: Int): Boolean {
    return (x > y) && (x != 0) || (y < 100)
}

// Función que retorna Unit (no retorna nada)
fun procedureFunction(msg: String): Unit {
    println("Procedure message: " + msg)
}

// ==================== FUNCIÓN MAIN ====================
fun main(): Unit {
    // ========== DECLARACIONES LOCALES ==========
    var localInt: Int = 1000
    val localConstant: Int = 50
    var localFloat: Float = 2.71828f
    var localString: String = "Local String"
    var localBoolean: Boolean = false
    var localDecimal: Float = 999.999f
    
    // Declaraciones con valores complejos
    var complexInt: Int = ((10 + 5) * 3 - 2) / 4 % 7
    var complexFloat: Float = (3.14f + 2.71f) * (1.41f - 0.5f) / 2.0f % 1.5f
    var complexString: String = "Hello" + " " + "World" + "!"
    var complexBoolean: Boolean = true && false || !true
    
    // ========== ASIGNACIONES SIMPLES ==========
    localInt = 500
    localFloat = 1.618f
    localString = "New String Value"
    localBoolean = true
    
    // ========== OPERACIONES COMPUESTAS ==========
    localInt += 100        // Plus assign
    localInt -= 25         // Minus assign
    localInt *= 2          // Multiply assign
    localInt /= 3          // Divide assign
    localInt %= 10         // Modulo assign
    
    localFloat += 1.5f     // Plus assign con float
    localFloat -= 0.25f    // Minus assign con float
    localFloat *= 3.0f     // Multiply assign con float
    localFloat /= 2.0f     // Divide assign con float
    localFloat %= 5.0f     // Modulo assign con float
    
    // ========== OPERADORES DE INCREMENTO/DECREMENTO ==========
    ++localInt             // Pre-incremento
    localInt++             // Post-incremento
    --localInt             // Pre-decremento
    localInt--             // Post-decremento
    
    // ========== CONCATENACIÓN DE STRINGS ==========
    localString = "Part1" + " " + "Part2" + " " + "Part3"
    localString += " - Appended"
    
    // ========== EXPRESIONES ARITMÉTICAS COMPLEJAS ==========
    var arithmetic1: Int = 10 + 20 - 5 * 3 / 2 % 4
    var arithmetic2: Float = 3.14f * 2.0f + 1.5f - 0.5f / 0.25f % 1.0f
    var arithmetic3: Int = (100 + 50) * (20 - 5) / (3 + 2) % 7
    var arithmetic4: Float = ((5.5f + 2.2f) * (8.8f - 3.3f)) / ((2.0f + 1.0f) % 2.5f)
    
    // ========== EXPRESIONES RELACIONALES ==========
    var rel1: Boolean = 10 < 20
    var rel2: Boolean = 15 <= 15
    var rel3: Boolean = 25 > 20
    var rel4: Boolean = 30 >= 30
    var rel5: Boolean = 40 == 40
    var rel6: Boolean = 50 != 60
    
    var relFloat1: Boolean = 3.14f < 3.15f
    var relFloat2: Boolean = 2.5f >= 2.5f
    var relString1: Boolean = "abc" == "abc"
    var relString2: Boolean = "hello" != "world"
    
    // ========== EXPRESIONES LÓGICAS ==========
    var logic1: Boolean = true && false
    var logic2: Boolean = false || true
    var logic3: Boolean = !true
    var logic4: Boolean = !false
    var logic5: Boolean = (10 > 5) && (20 < 30)
    var logic6: Boolean = (1 == 2) || (3 != 4)
    var logic7: Boolean = !(10 < 5) && (true || false)
    
    // ========== RANGOS ==========
    var range1: Int = 0
    var range2: Int = 0
    var range3: Int = 0
    
    // For con rango simple
    for (i in 1..5) {
        range1 += i
    }
    
    // For con rango until
    for (j in 0 until 10) {
        range2 += j
    }
    
    // For con rango downTo
    for (k in 10 downTo 1) {
        range3 += k
    }
    
    // For con step
    for (m in 1..10 step 2) {
        range1 += m
    }
    
    // ========== LLAMADAS A FUNCIONES ==========
    var funcResult1: Int = simpleFunction()
    var funcResult2: Float = complexCalculation(25, 3.5f, "test", true)
    var funcResult3: String = stringProcessor("Input", "Suffix")
    var funcResult4: Boolean = logicalProcessor(100, 50)
    
    // Llamada a función que retorna Unit
    procedureFunction("Hello from main")
    
    // ========== ESTRUCTURAS DE CONTROL - IF/ELSE ==========
    if (localInt > 100) {
        println("localInt is greater than 100: " + localInt)
    } else {
        println("localInt is not greater than 100: " + localInt)
    }
    
    // If/else anidado
    if (localFloat > 5.0f) {
        if (localBoolean) {
            println("Both conditions are true")
        } else {
            println("Float condition true, boolean false")
        }
    } else {
        println("Float condition is false")
    }
    
    // If sin else
    if (complexBoolean || localBoolean) {
        println("At least one boolean is true")
    }
    
    // ========== ESTRUCTURAS DE CONTROL - WHILE ==========
    var whileCounter: Int = 0
    while (whileCounter < 5) {
        println("While iteration: " + whileCounter)
        whileCounter++
        if (whileCounter == 3) {
            continue    // Continue statement
        }
        if (whileCounter > 10) {
            break       // Break statement (no se ejecutará en este caso)
        }
    }
    
    // ========== ESTRUCTURAS DE CONTROL - DO-WHILE ==========
    var doWhileCounter: Int = 0
    do {
        println("Do-while iteration: " + doWhileCounter)
        doWhileCounter++
    } while (doWhileCounter < 3)
    
    // ========== BLOQUES RUN ==========
    run {
        var runBlockVar: Int = 999
        println("Inside run block: " + runBlockVar)
        runBlockVar *= 2
        println("Modified in run block: " + runBlockVar)
    }
    
    // Run block anidado
    run {
        var outer: String = "Outer"
        println("Run block outer: " + outer)
        run {
            var inner: String = "Inner"
            println("Run block inner: " + inner)
            println("Accessing outer from inner: " + outer)
        }
        println("Back to outer: " + outer)
    }
    
    // ========== EXPRESIONES CON PARÉNTESIS ==========
    var parentheses1: Int = (10 + 20) * (30 - 15)
    var parentheses2: Float = ((3.14f + 2.71f) * (1.41f)) / (2.0f + 1.5f)
    var parentheses3: Boolean = ((10 > 5) && (20 < 30)) || ((1 == 1) && (2 != 3))
    var parentheses4: String = ("Hello" + " ") + ("World" + "!")
    
    // ========== EXPRESIONES UNARIAS ==========
    var positive: Int = +localInt         // Operador unario +
    var negative: Int = -localInt         // Operador unario -
    var notBoolean: Boolean = !localBoolean  // Operador unario !
    
    // ========== EXPRESIONES COMPLEJAS COMBINADAS ==========
    var megaExpression: Float = (
        (complexFloat + localFloat) * (arithmetic2 - 1.0f) + 
        funcResult2 / (parentheses2 + 0.5f)
    ) % (localFloat + 2.0f)
    
    var megaBoolean: Boolean = (
        (logic5 && logic6) || 
        (rel1 && !rel2) && 
        (funcResult4 || (localInt > funcResult1))
    )
    
    var megaString: String = (
        "MEGA: " + funcResult3 + " - " + 
        complexString + " - Numbers: " + 
        parentheses1 + " / " + megaExpression + 
        " - Boolean: " + megaBoolean
    )
    
    // ========== CASOS ESPECIALES CON LITERALES ==========
    var specialFloat1: Float = 0.0f
    var specialFloat2: Float = 123f
    var specialFloat3: Float = 456.789f
    var specialInt1: Int = 0
    var specialInt2: Int = 999999
    var specialString1: String = ""
    var specialString2: String = "String with \"quotes\" inside"
    var specialBoolean1: Boolean = true
    var specialBoolean2: Boolean = false
    
    // ========== PRINT STATEMENTS ==========
    print("Print without newline: ")
    println("Println with newline")
    
    println("=== RESULTADOS FINALES ===")
    println("localInt final: " + localInt)
    println("localFloat final: " + localFloat)
    println("localString final: " + localString)
    println("localBoolean final: " + localBoolean)
    println("complexInt: " + complexInt)
    println("complexFloat: " + complexFloat)
    println("complexString: " + complexString)
    println("complexBoolean: " + complexBoolean)
    
    println("=== OPERACIONES ARITMÉTICAS ===")   
    println("arithmetic1: " + arithmetic1)
    println("arithmetic2: " + arithmetic2)
    println("arithmetic3: " + arithmetic3)
    println("arithmetic4: " + arithmetic4)
    
    println("=== OPERACIONES RELACIONALES ===")
    println("rel1 (10 < 20): " + rel1)
    println("rel2 (15 <= 15): " + rel2)
    println("rel3 (25 > 20): " + rel3)
    println("rel4 (30 >= 30): " + rel4)
    println("rel5 (40 == 40): " + rel5)
    println("rel6 (50 != 60): " + rel6)
    
    println("=== OPERACIONES LÓGICAS ===")
    println("logic1 (true && false): " + logic1)
    println("logic2 (false || true): " + logic2)
    println("logic3 (!true): " + logic3)
    println("logic4 (!false): " + logic4)
    println("logic5: " + logic5)
    println("logic6: " + logic6)
    println("logic7: " + logic7)
    
    println("=== RANGOS ===")
    println("range1 (suma 1..5 + 1..10 step 2): " + range1)
    println("range2 (suma 0 until 10): " + range2)
    println("range3 (suma 10 downTo 1): " + range3)
    
    println("=== FUNCIONES ===")
    println("funcResult1: " + funcResult1)
    println("funcResult2: " + funcResult2)
    println("funcResult3: " + funcResult3)
    println("funcResult4: " + funcResult4)
    
    println("=== PARÉNTESIS ===")
    println("parentheses1: " + parentheses1)
    println("parentheses2: " + parentheses2)
    println("parentheses3: " + parentheses3)
    println("parentheses4: " + parentheses4)
    
    println("=== UNARIOS ===")
    println("positive (+localInt): " + positive)
    println("negative (-localInt): " + negative)
    println("notBoolean (!localBoolean): " + notBoolean)
    
    println("=== MEGA EXPRESIONES ===")
    println("megaExpression: " + megaExpression)
    println("megaBoolean: " + megaBoolean)
    println("megaString: " + megaString)
    
    println("=== LITERALES ESPECIALES ===")
    println("specialFloat1: " + specialFloat1)
    println("specialFloat2: " + specialFloat2)
    println("specialFloat3: " + specialFloat3)
    println("specialInt1: " + specialInt1)
    println("specialInt2: " + specialInt2)
    println("specialString1: '" + specialString1 + "'")
    println("specialString2: " + specialString2)
    println("specialBoolean1: " + specialBoolean1)
    println("specialBoolean2: " + specialBoolean2)
    
    println("=== FIN DEL MEGA TEST ===")
    
    // Return statement al final (opcional para Unit)
    return
}

// Función adicional para probar más casos
fun additionalTestFunction(param1: Int, param2: Float, param3: String, param4: Boolean): String {
    var result: String = "Function with params: "
    result += param1
    result += " - "
    result += param2
    result += " - "
    result += param3
    result += " - "
    result += param4
    
    if (param1 > 0) {
        result += " - Positive int"
    }
    
    if (param2 > 0.0f) {
        result += " - Positive float"
    }
    
    if (param4) {
        result += " - Boolean is true"
    } else {
        result += " - Boolean is false"
    }
    
    return result
}

// Función que usa todos los tipos de return
fun multiReturnFunction(condition: Int): Int {
    if (condition == 1) {
        return 100
    } else if (condition == 2) {
        return 200
    } else {
        return 300
    }
}

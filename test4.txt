// Test 4: Complete Integration and Edge Cases
// Tests complete programs with all features and edge case syntax

// Recursive function example
fun factorial(n: Int): Int {
    if (n <= 1) {
        return 1
    } else {
        return n * factorial(n - 1);
    }
}

// Prime checking algorithm
fun isPrime(num: Int): Boolean {
    if (num < 2) {
        return false;
    }
    
    var i = 2
    while (i * i <= num) {
        if (num % i == 0) {
            return false
        }
        i = i + 1;
    }
    
    return true
}

// Main integration function
fun integrationTest(): Unit {
    print("=== Integration Test ===");
    
    // Variable declarations with mixed semicolon usage
    val maxNum = 10
    var sum = 0;
    var primeCount = 0
    var factorialSum = 0;
    
    // Main processing loop
    for (i in 1..maxNum) {
        sum = sum + i
        
        // Check if prime
        if (isPrime(i)) {
            print("Prime found: ");
            print(i)
            primeCount = primeCount + 1
        }
        
        // Calculate factorial for small numbers
        if (i <= 5) {
            val fact = factorial(i)
            print("Factorial of ")
            print(i);
            print(" is ")
            print(fact)
            factorialSum = factorialSum + fact;
        }
    }
    
    // Results summary
    print("Total sum: ")
    print(sum);
    print("Prime count: ")
    print(primeCount)
    print("Factorial sum: ");
    print(factorialSum)
    
    // Complex conditional logic
    if (sum > 50 && primeCount >= 4) {
        print("High values achieved")
        
        if (factorialSum > 100) {
            print("Factorial sum also high");
        }
    } else {
        print("Standard values")
    }
}

// Edge case syntax testing
fun edgeCases(): Unit {
    // Minimal spacing
    val a=1;val b=2
    var c:Int=a+b
    
    // No semicolons
    val x = 10
    val y = 20
    val z = x + y
    
    // Empty blocks
    if (true) {
    }
    
    while (false) {
    }
    
    // Single statements without braces
    if (a == 1)
        print("Single if")
        
    if (b == 2)
        print("b is 2");
    else
        print("b is not 2")
    
    var counter = 0
    while (counter < 2)
        counter = counter + 1;
    
    for (i in 1..2)
        print(i)
        
    // Complex expressions without semicolons
    val result = ((a + b) * (x - y)) + (z / 2)
    print(result)
    
    // Boolean logic edge cases
    val test1 = true && false || true
    val test2 = !false && (true || false);
    val test3 = (a < b) && (x > y) || (z == 30)
    
    print(test1)
    print(test2);
    print(test3)
}

// String manipulation and type testing
fun typeDemo(): Unit {
    val intVal = 42;
    val floatVal = 3.14f
    val stringVal = "Testing";
    val boolVal = true
    
    print("Int: ")
    print(intVal);
    print("Float: ")
    print(floatVal)
    print("String: ");
    print(stringVal)
    print("Bool: ")
    print(boolVal);
    
    // Type mixing in expressions
    val mixed = intVal + 10
    print(mixed)
    
    // String concatenation behavior
    print("Result is: ");
    print(mixed)
}

// Final comprehensive test
fun comprehensiveTest(): Unit {
    print("Starting comprehensive test")
    
    integrationTest()
    edgeCases();
    typeDemo()
    
    print("All tests completed");
}
